// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/exchange.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeServiceClient is the client API for ExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeServiceClient interface {
	GetTrades(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (*GetTradesResponse, error)
	GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error)
	StreamTickerData(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (ExchangeService_StreamTickerDataClient, error)
	GetSubDepositAddress(ctx context.Context, in *GetSubDepositAddressRequest, opts ...grpc.CallOption) (*GetSubDepositAddressResponse, error)
	GetAccountCoinsBalance(ctx context.Context, in *AccountCoinsBalanceRequest, opts ...grpc.CallOption) (*AccountCoinsBalanceResponse, error)
	GetWithdrawalRecords(ctx context.Context, in *WithdrawalRecordsRequest, opts ...grpc.CallOption) (*WithdrawalRecordsResponse, error)
	GetWithdrawableAmount(ctx context.Context, in *WithdrawableAmountRequest, opts ...grpc.CallOption) (*WithdrawableAmountResponse, error)
}

type exchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeServiceClient(cc grpc.ClientConnInterface) ExchangeServiceClient {
	return &exchangeServiceClient{cc}
}

func (c *exchangeServiceClient) GetTrades(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (*GetTradesResponse, error) {
	out := new(GetTradesResponse)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/GetTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) GetWalletBalance(ctx context.Context, in *GetWalletBalanceRequest, opts ...grpc.CallOption) (*GetWalletBalanceResponse, error) {
	out := new(GetWalletBalanceResponse)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/GetWalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) StreamTickerData(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (ExchangeService_StreamTickerDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExchangeService_ServiceDesc.Streams[0], "/exchange.ExchangeService/StreamTickerData", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeServiceStreamTickerDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExchangeService_StreamTickerDataClient interface {
	Recv() (*TickerResponse, error)
	grpc.ClientStream
}

type exchangeServiceStreamTickerDataClient struct {
	grpc.ClientStream
}

func (x *exchangeServiceStreamTickerDataClient) Recv() (*TickerResponse, error) {
	m := new(TickerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exchangeServiceClient) GetSubDepositAddress(ctx context.Context, in *GetSubDepositAddressRequest, opts ...grpc.CallOption) (*GetSubDepositAddressResponse, error) {
	out := new(GetSubDepositAddressResponse)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/GetSubDepositAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) GetAccountCoinsBalance(ctx context.Context, in *AccountCoinsBalanceRequest, opts ...grpc.CallOption) (*AccountCoinsBalanceResponse, error) {
	out := new(AccountCoinsBalanceResponse)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/GetAccountCoinsBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) GetWithdrawalRecords(ctx context.Context, in *WithdrawalRecordsRequest, opts ...grpc.CallOption) (*WithdrawalRecordsResponse, error) {
	out := new(WithdrawalRecordsResponse)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/GetWithdrawalRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) GetWithdrawableAmount(ctx context.Context, in *WithdrawableAmountRequest, opts ...grpc.CallOption) (*WithdrawableAmountResponse, error) {
	out := new(WithdrawableAmountResponse)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/GetWithdrawableAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServiceServer is the server API for ExchangeService service.
// All implementations must embed UnimplementedExchangeServiceServer
// for forward compatibility
type ExchangeServiceServer interface {
	GetTrades(context.Context, *GetTradesRequest) (*GetTradesResponse, error)
	GetWalletBalance(context.Context, *GetWalletBalanceRequest) (*GetWalletBalanceResponse, error)
	StreamTickerData(*TickerRequest, ExchangeService_StreamTickerDataServer) error
	GetSubDepositAddress(context.Context, *GetSubDepositAddressRequest) (*GetSubDepositAddressResponse, error)
	GetAccountCoinsBalance(context.Context, *AccountCoinsBalanceRequest) (*AccountCoinsBalanceResponse, error)
	GetWithdrawalRecords(context.Context, *WithdrawalRecordsRequest) (*WithdrawalRecordsResponse, error)
	GetWithdrawableAmount(context.Context, *WithdrawableAmountRequest) (*WithdrawableAmountResponse, error)
	mustEmbedUnimplementedExchangeServiceServer()
}

// UnimplementedExchangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeServiceServer struct {
}

func (UnimplementedExchangeServiceServer) GetTrades(context.Context, *GetTradesRequest) (*GetTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (UnimplementedExchangeServiceServer) GetWalletBalance(context.Context, *GetWalletBalanceRequest) (*GetWalletBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBalance not implemented")
}
func (UnimplementedExchangeServiceServer) StreamTickerData(*TickerRequest, ExchangeService_StreamTickerDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTickerData not implemented")
}
func (UnimplementedExchangeServiceServer) GetSubDepositAddress(context.Context, *GetSubDepositAddressRequest) (*GetSubDepositAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubDepositAddress not implemented")
}
func (UnimplementedExchangeServiceServer) GetAccountCoinsBalance(context.Context, *AccountCoinsBalanceRequest) (*AccountCoinsBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountCoinsBalance not implemented")
}
func (UnimplementedExchangeServiceServer) GetWithdrawalRecords(context.Context, *WithdrawalRecordsRequest) (*WithdrawalRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawalRecords not implemented")
}
func (UnimplementedExchangeServiceServer) GetWithdrawableAmount(context.Context, *WithdrawableAmountRequest) (*WithdrawableAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawableAmount not implemented")
}
func (UnimplementedExchangeServiceServer) mustEmbedUnimplementedExchangeServiceServer() {}

// UnsafeExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServiceServer will
// result in compilation errors.
type UnsafeExchangeServiceServer interface {
	mustEmbedUnimplementedExchangeServiceServer()
}

func RegisterExchangeServiceServer(s grpc.ServiceRegistrar, srv ExchangeServiceServer) {
	s.RegisterService(&ExchangeService_ServiceDesc, srv)
}

func _ExchangeService_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/GetTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetTrades(ctx, req.(*GetTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_GetWalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetWalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/GetWalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetWalletBalance(ctx, req.(*GetWalletBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_StreamTickerData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TickerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeServiceServer).StreamTickerData(m, &exchangeServiceStreamTickerDataServer{stream})
}

type ExchangeService_StreamTickerDataServer interface {
	Send(*TickerResponse) error
	grpc.ServerStream
}

type exchangeServiceStreamTickerDataServer struct {
	grpc.ServerStream
}

func (x *exchangeServiceStreamTickerDataServer) Send(m *TickerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ExchangeService_GetSubDepositAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubDepositAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetSubDepositAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/GetSubDepositAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetSubDepositAddress(ctx, req.(*GetSubDepositAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_GetAccountCoinsBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCoinsBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetAccountCoinsBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/GetAccountCoinsBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetAccountCoinsBalance(ctx, req.(*AccountCoinsBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_GetWithdrawalRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetWithdrawalRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/GetWithdrawalRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetWithdrawalRecords(ctx, req.(*WithdrawalRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_GetWithdrawableAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawableAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetWithdrawableAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/GetWithdrawableAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetWithdrawableAmount(ctx, req.(*WithdrawableAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeService_ServiceDesc is the grpc.ServiceDesc for ExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.ExchangeService",
	HandlerType: (*ExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrades",
			Handler:    _ExchangeService_GetTrades_Handler,
		},
		{
			MethodName: "GetWalletBalance",
			Handler:    _ExchangeService_GetWalletBalance_Handler,
		},
		{
			MethodName: "GetSubDepositAddress",
			Handler:    _ExchangeService_GetSubDepositAddress_Handler,
		},
		{
			MethodName: "GetAccountCoinsBalance",
			Handler:    _ExchangeService_GetAccountCoinsBalance_Handler,
		},
		{
			MethodName: "GetWithdrawalRecords",
			Handler:    _ExchangeService_GetWithdrawalRecords_Handler,
		},
		{
			MethodName: "GetWithdrawableAmount",
			Handler:    _ExchangeService_GetWithdrawableAmount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTickerData",
			Handler:       _ExchangeService_StreamTickerData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/exchange.proto",
}
